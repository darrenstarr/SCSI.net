using iSCSI.net.ISCSI;
using System;
using System.Runtime.InteropServices;
using Xunit;

namespace iSCSI.net.UnitTests
{
    public class ISCSICommandStructures
    {
        static byte[] LoginPacket = new byte[]
        {
            0x43, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8e,
            0x40, 0x00, 0x01, 0x37, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f,
            0x72, 0x4e, 0x61, 0x6d, 0x65, 0x3d, 0x69, 0x71,
            0x6e, 0x2e, 0x31, 0x39, 0x39, 0x31, 0x2d, 0x30,
            0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x69,
            0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x3a,
            0x77, 0x69, 0x6e, 0x32, 0x30, 0x30, 0x33, 0x73,
            0x00, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
            0x54, 0x79, 0x70, 0x65, 0x3d, 0x4e, 0x6f, 0x72,
            0x6d, 0x61, 0x6c, 0x00, 0x54, 0x61, 0x72, 0x67,
            0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x3d, 0x69,
            0x71, 0x6e, 0x2e, 0x32, 0x30, 0x30, 0x31, 0x2d,
            0x30, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65,
            0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3a, 0x73,
            0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x64,
            0x69, 0x73, 0x6b, 0x32, 0x2e, 0x73, 0x79, 0x73,
            0x31, 0x2e, 0x6c, 0x62, 0x64, 0x00, 0x41, 0x75,
            0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
            0x3d, 0x4e, 0x6f, 0x6e, 0x65, 0x00, 0x00, 0x00
        };

        [Fact]
        public void BasicHeaderSegmentTest()
        {
            Assert.Equal(48, Marshal.SizeOf(typeof(BasicHeaderSegment)));

            Span<BasicHeaderSegment> headerSegmentArray = MemoryMarshal.Cast<byte, BasicHeaderSegment>(LoginPacket.AsSpan(0, 48));

            Assert.Equal(1, headerSegmentArray.Length);
            var headerSegment = headerSegmentArray[0];

            Assert.True(headerSegment.ImmediateDelivery);
            Assert.Equal(EOpcode.LoginRequest, headerSegment.Opcode);
            Assert.True(headerSegment.Final);

            // 0x01 = Operational Negotiation.
            // 0x00 = Version Max
            // 0x00 = Version Min
            Assert.Equal<uint>(((uint)0x010000).ToNetworkOrder(), headerSegment.OpcodeSpecificFields);

            Assert.Equal(0x00, headerSegment.TotalAHSLength);
            Assert.Equal<uint>(142, headerSegment.DataSegmentLength);

            var ISIDandTSIHData = new byte[] {
                // ISID
                0x40, // IANA Entrprise number = 0x1
                0x00, 0x01, // ISID_b
                0x37, // ISID_c
                0x00, 0x00, // ISID_d
                // TSIH
                0x00, 0x00
            };
            var ISIDandTSIH = BitConverter.ToUInt64(ISIDandTSIHData);
            Assert.Equal(ISIDandTSIH, headerSegment.LunOpcodeSpecificFields);

            Assert.Equal<uint>(1, headerSegment.InitiatorTaskTag);
            Assert.Equal<ushort>(0x0001, (ushort)(headerSegment.OpcodeSpecificFields1 >> 48));
        }
    }
}
